// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_beta_funs
Rcpp::List cpp_beta_funs(const double A, const double B);
RcppExport SEXP _betaphi_cpp_beta_funs(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_beta_funs(A, B));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ibeta_funs
Rcpp::List cpp_ibeta_funs(const double X, const double A, const double B);
RcppExport SEXP _betaphi_cpp_ibeta_funs(SEXP XSEXP, SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ibeta_funs(X, A, B));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cdfbeta_funs
Rcpp::List cpp_cdfbeta_funs(const double X, const double A, const double B);
RcppExport SEXP _betaphi_cpp_cdfbeta_funs(SEXP XSEXP, SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cdfbeta_funs(X, A, B));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cdfbeta_muphi_funs
Rcpp::List cpp_cdfbeta_muphi_funs(const double X, const double MU, const double PHI);
RcppExport SEXP _betaphi_cpp_cdfbeta_muphi_funs(SEXP XSEXP, SEXP MUSEXP, SEXP PHISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const double >::type PHI(PHISEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cdfbeta_muphi_funs(X, MU, PHI));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ordinal_loglik
Rcpp::List cpp_ordinal_loglik(const double Y, const double MU, const double PHI, const int K);
RcppExport SEXP _betaphi_cpp_ordinal_loglik(SEXP YSEXP, SEXP MUSEXP, SEXP PHISEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const double >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ordinal_loglik(Y, MU, PHI, K));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ordinal_item_loglik
Rcpp::List cpp_ordinal_item_loglik(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::VectorXd> ITEM_INDS, const double ALPHA, const double PHI, const int K, const int J, const int ITEM);
RcppExport SEXP _betaphi_cpp_ordinal_item_loglik(SEXP YSEXP, SEXP ITEM_INDSSEXP, SEXP ALPHASEXP, SEXP PHISEXP, SEXP KSEXP, SEXP JSEXP, SEXP ITEMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ITEM_INDS(ITEM_INDSSEXP);
    Rcpp::traits::input_parameter< const double >::type ALPHA(ALPHASEXP);
    Rcpp::traits::input_parameter< const double >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int >::type ITEM(ITEMSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ordinal_item_loglik(Y, ITEM_INDS, ALPHA, PHI, K, J, ITEM));
    return rcpp_result_gen;
END_RCPP
}
// cpp_log_det_obs_info
double cpp_log_det_obs_info(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::VectorXd> ITEM_INDS, Eigen::Map<Eigen::VectorXd> ALPHA, const double PHI, const int K, const int J);
RcppExport SEXP _betaphi_cpp_log_det_obs_info(SEXP YSEXP, SEXP ITEM_INDSSEXP, SEXP ALPHASEXP, SEXP PHISEXP, SEXP KSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ITEM_INDS(ITEM_INDSSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ALPHA(ALPHASEXP);
    Rcpp::traits::input_parameter< const double >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_log_det_obs_info(Y, ITEM_INDS, ALPHA, PHI, K, J));
    return rcpp_result_gen;
END_RCPP
}
// cpp_log_det_E0d0d1
double cpp_log_det_E0d0d1(Eigen::Map<Eigen::VectorXd> ITEM_INDS, Eigen::Map<Eigen::VectorXd> ALPHA0, Eigen::Map<Eigen::VectorXd> ALPHA1, const double PHI0, const double PHI1, const int K, const int J);
RcppExport SEXP _betaphi_cpp_log_det_E0d0d1(SEXP ITEM_INDSSEXP, SEXP ALPHA0SEXP, SEXP ALPHA1SEXP, SEXP PHI0SEXP, SEXP PHI1SEXP, SEXP KSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ITEM_INDS(ITEM_INDSSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ALPHA0(ALPHA0SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ALPHA1(ALPHA1SEXP);
    Rcpp::traits::input_parameter< const double >::type PHI0(PHI0SEXP);
    Rcpp::traits::input_parameter< const double >::type PHI1(PHI1SEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_log_det_E0d0d1(ITEM_INDS, ALPHA0, ALPHA1, PHI0, PHI1, K, J));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_phi_mle
std::vector<double> cpp_get_phi_mle(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::VectorXd> ITEM_INDS, Eigen::Map<Eigen::VectorXd> ALPHA_START, const double PHI_START, const int K, const int J, const int SEARCH_RANGE, const int MAX_ITER, const int PROF_SEARCH_RANGE, const int PROF_MAX_ITER, const int PROF_METHOD, const bool VERBOSE, const bool CONTINUOUS);
RcppExport SEXP _betaphi_cpp_get_phi_mle(SEXP YSEXP, SEXP ITEM_INDSSEXP, SEXP ALPHA_STARTSEXP, SEXP PHI_STARTSEXP, SEXP KSEXP, SEXP JSEXP, SEXP SEARCH_RANGESEXP, SEXP MAX_ITERSEXP, SEXP PROF_SEARCH_RANGESEXP, SEXP PROF_MAX_ITERSEXP, SEXP PROF_METHODSEXP, SEXP VERBOSESEXP, SEXP CONTINUOUSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ITEM_INDS(ITEM_INDSSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ALPHA_START(ALPHA_STARTSEXP);
    Rcpp::traits::input_parameter< const double >::type PHI_START(PHI_STARTSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int >::type SEARCH_RANGE(SEARCH_RANGESEXP);
    Rcpp::traits::input_parameter< const int >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_SEARCH_RANGE(PROF_SEARCH_RANGESEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_MAX_ITER(PROF_MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_METHOD(PROF_METHODSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSE(VERBOSESEXP);
    Rcpp::traits::input_parameter< const bool >::type CONTINUOUS(CONTINUOUSSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_phi_mle(Y, ITEM_INDS, ALPHA_START, PHI_START, K, J, SEARCH_RANGE, MAX_ITER, PROF_SEARCH_RANGE, PROF_MAX_ITER, PROF_METHOD, VERBOSE, CONTINUOUS));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_phi_mp
std::vector<double> cpp_get_phi_mp(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::VectorXd> ITEM_INDS, Eigen::Map<Eigen::VectorXd> ALPHA_START, const double PHI_START, const int K, const int J, const int SEARCH_RANGE, const int MAX_ITER, const int PROF_SEARCH_RANGE, const int PROF_MAX_ITER, const int PROF_METHOD, const bool VERBOSE, const bool CONTINUOUS);
RcppExport SEXP _betaphi_cpp_get_phi_mp(SEXP YSEXP, SEXP ITEM_INDSSEXP, SEXP ALPHA_STARTSEXP, SEXP PHI_STARTSEXP, SEXP KSEXP, SEXP JSEXP, SEXP SEARCH_RANGESEXP, SEXP MAX_ITERSEXP, SEXP PROF_SEARCH_RANGESEXP, SEXP PROF_MAX_ITERSEXP, SEXP PROF_METHODSEXP, SEXP VERBOSESEXP, SEXP CONTINUOUSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ITEM_INDS(ITEM_INDSSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ALPHA_START(ALPHA_STARTSEXP);
    Rcpp::traits::input_parameter< const double >::type PHI_START(PHI_STARTSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int >::type SEARCH_RANGE(SEARCH_RANGESEXP);
    Rcpp::traits::input_parameter< const int >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_SEARCH_RANGE(PROF_SEARCH_RANGESEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_MAX_ITER(PROF_MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_METHOD(PROF_METHODSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSE(VERBOSESEXP);
    Rcpp::traits::input_parameter< const bool >::type CONTINUOUS(CONTINUOUSSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_phi_mp(Y, ITEM_INDS, ALPHA_START, PHI_START, K, J, SEARCH_RANGE, MAX_ITER, PROF_SEARCH_RANGE, PROF_MAX_ITER, PROF_METHOD, VERBOSE, CONTINUOUS));
    return rcpp_result_gen;
END_RCPP
}
// cpp_profile_likelihood
double cpp_profile_likelihood(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::VectorXd> ITEM_INDS, Eigen::Map<Eigen::VectorXd> ALPHA_START, const double PHI, const int K, const int J, const int PROF_SEARCH_RANGE, const int PROF_MAX_ITER, const int PROF_METHOD, const bool CONTINUOUS);
RcppExport SEXP _betaphi_cpp_profile_likelihood(SEXP YSEXP, SEXP ITEM_INDSSEXP, SEXP ALPHA_STARTSEXP, SEXP PHISEXP, SEXP KSEXP, SEXP JSEXP, SEXP PROF_SEARCH_RANGESEXP, SEXP PROF_MAX_ITERSEXP, SEXP PROF_METHODSEXP, SEXP CONTINUOUSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ITEM_INDS(ITEM_INDSSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ALPHA_START(ALPHA_STARTSEXP);
    Rcpp::traits::input_parameter< const double >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_SEARCH_RANGE(PROF_SEARCH_RANGESEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_MAX_ITER(PROF_MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_METHOD(PROF_METHODSEXP);
    Rcpp::traits::input_parameter< const bool >::type CONTINUOUS(CONTINUOUSSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_profile_likelihood(Y, ITEM_INDS, ALPHA_START, PHI, K, J, PROF_SEARCH_RANGE, PROF_MAX_ITER, PROF_METHOD, CONTINUOUS));
    return rcpp_result_gen;
END_RCPP
}
// cpp_modified_profile_likelihood
double cpp_modified_profile_likelihood(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::VectorXd> ITEM_INDS, Eigen::Map<Eigen::VectorXd> ALPHA_START, const double PHI_MLE, const double PHI, const int K, const int J, const int SEARCH_RANGE, const int MAX_ITER, const int PROF_SEARCH_RANGE, const int PROF_MAX_ITER, const int PROF_METHOD, const bool CONTINUOUS);
RcppExport SEXP _betaphi_cpp_modified_profile_likelihood(SEXP YSEXP, SEXP ITEM_INDSSEXP, SEXP ALPHA_STARTSEXP, SEXP PHI_MLESEXP, SEXP PHISEXP, SEXP KSEXP, SEXP JSEXP, SEXP SEARCH_RANGESEXP, SEXP MAX_ITERSEXP, SEXP PROF_SEARCH_RANGESEXP, SEXP PROF_MAX_ITERSEXP, SEXP PROF_METHODSEXP, SEXP CONTINUOUSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ITEM_INDS(ITEM_INDSSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ALPHA_START(ALPHA_STARTSEXP);
    Rcpp::traits::input_parameter< const double >::type PHI_MLE(PHI_MLESEXP);
    Rcpp::traits::input_parameter< const double >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int >::type SEARCH_RANGE(SEARCH_RANGESEXP);
    Rcpp::traits::input_parameter< const int >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_SEARCH_RANGE(PROF_SEARCH_RANGESEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_MAX_ITER(PROF_MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_METHOD(PROF_METHODSEXP);
    Rcpp::traits::input_parameter< const bool >::type CONTINUOUS(CONTINUOUSSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_modified_profile_likelihood(Y, ITEM_INDS, ALPHA_START, PHI_MLE, PHI, K, J, SEARCH_RANGE, MAX_ITER, PROF_SEARCH_RANGE, PROF_MAX_ITER, PROF_METHOD, CONTINUOUS));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_se
double cpp_get_se(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::VectorXd> ITEM_INDS, Eigen::Map<Eigen::VectorXd> ALPHA_START, const double PHI_EVAL, const double PHI_MLE, const int K, const int J, const int SEARCH_RANGE, const int MAX_ITER, const int PROF_SEARCH_RANGE, const int PROF_MAX_ITER, const int PROF_METHOD, const bool MODIFIED, const bool CONTINUOUS);
RcppExport SEXP _betaphi_cpp_get_se(SEXP YSEXP, SEXP ITEM_INDSSEXP, SEXP ALPHA_STARTSEXP, SEXP PHI_EVALSEXP, SEXP PHI_MLESEXP, SEXP KSEXP, SEXP JSEXP, SEXP SEARCH_RANGESEXP, SEXP MAX_ITERSEXP, SEXP PROF_SEARCH_RANGESEXP, SEXP PROF_MAX_ITERSEXP, SEXP PROF_METHODSEXP, SEXP MODIFIEDSEXP, SEXP CONTINUOUSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ITEM_INDS(ITEM_INDSSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type ALPHA_START(ALPHA_STARTSEXP);
    Rcpp::traits::input_parameter< const double >::type PHI_EVAL(PHI_EVALSEXP);
    Rcpp::traits::input_parameter< const double >::type PHI_MLE(PHI_MLESEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int >::type SEARCH_RANGE(SEARCH_RANGESEXP);
    Rcpp::traits::input_parameter< const int >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_SEARCH_RANGE(PROF_SEARCH_RANGESEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_MAX_ITER(PROF_MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const int >::type PROF_METHOD(PROF_METHODSEXP);
    Rcpp::traits::input_parameter< const bool >::type MODIFIED(MODIFIEDSEXP);
    Rcpp::traits::input_parameter< const bool >::type CONTINUOUS(CONTINUOUSSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_se(Y, ITEM_INDS, ALPHA_START, PHI_EVAL, PHI_MLE, K, J, SEARCH_RANGE, MAX_ITER, PROF_SEARCH_RANGE, PROF_MAX_ITER, PROF_METHOD, MODIFIED, CONTINUOUS));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_betaphi_cpp_beta_funs", (DL_FUNC) &_betaphi_cpp_beta_funs, 2},
    {"_betaphi_cpp_ibeta_funs", (DL_FUNC) &_betaphi_cpp_ibeta_funs, 3},
    {"_betaphi_cpp_cdfbeta_funs", (DL_FUNC) &_betaphi_cpp_cdfbeta_funs, 3},
    {"_betaphi_cpp_cdfbeta_muphi_funs", (DL_FUNC) &_betaphi_cpp_cdfbeta_muphi_funs, 3},
    {"_betaphi_cpp_ordinal_loglik", (DL_FUNC) &_betaphi_cpp_ordinal_loglik, 4},
    {"_betaphi_cpp_ordinal_item_loglik", (DL_FUNC) &_betaphi_cpp_ordinal_item_loglik, 7},
    {"_betaphi_cpp_log_det_obs_info", (DL_FUNC) &_betaphi_cpp_log_det_obs_info, 6},
    {"_betaphi_cpp_log_det_E0d0d1", (DL_FUNC) &_betaphi_cpp_log_det_E0d0d1, 7},
    {"_betaphi_cpp_get_phi_mle", (DL_FUNC) &_betaphi_cpp_get_phi_mle, 13},
    {"_betaphi_cpp_get_phi_mp", (DL_FUNC) &_betaphi_cpp_get_phi_mp, 13},
    {"_betaphi_cpp_profile_likelihood", (DL_FUNC) &_betaphi_cpp_profile_likelihood, 10},
    {"_betaphi_cpp_modified_profile_likelihood", (DL_FUNC) &_betaphi_cpp_modified_profile_likelihood, 13},
    {"_betaphi_cpp_get_se", (DL_FUNC) &_betaphi_cpp_get_se, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_betaphi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
